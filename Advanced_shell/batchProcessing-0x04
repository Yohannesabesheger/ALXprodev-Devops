#!/bin/bash

# Create output directory
mkdir -p pokemon_data
: > pokemon_data/errors.log

# List of Pokémon
pokemons=(bulbasaur ivysaur venusaur charmander charmeleon)

# Function to fetch Pokémon
fetch_pokemon() {
  local name="$1"
  echo "Fetching data for $name..."

  if curl -s --fail "https://pokeapi.co/api/v2/pokemon/$name" -o "pokemon_data/${name}.json"; then
    echo "Saved data to pokemon_data/${name}.json ✅"
  else
    echo "❌ Failed to fetch $name" | tee -a pokemon_data/errors.log
  fi
}

# Start jobs in background and store PIDs
declare -A pids
for name in "${pokemons[@]}"; do
  fetch_pokemon "$name" &
  pids[$name]=$!
done

# Simulate killing one process (for demo; optional)
# You can replace "venusaur" with any name you'd like to terminate
kill "${pids[venusaur]}" 2>/dev/null && echo "🛑 Killed fetch job for venusaur"

# Wait for remaining background jobs
for name in "${!pids[@]}"; do
  if [ "$name" != "venusaur" ]; then
    wait "${pids[$name]}"
  fi
done

echo "✅ Parallel fetching completed."
